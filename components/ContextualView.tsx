import React from 'react';
import type { GameState, CityMap, GridMap, MapAction } from '../types';
import { ALL_MAPS } from '../constants';
import { BookIcon, CoinIcon, PartyIcon } from './Icon';

interface ContextualViewProps {
    gameState: GameState;
    onMapAction: (action: MapAction) => void;
    onPlayerAction: (actionText: string) => void;
}

const terrainStyles: { [key: string]: string } = {
    forest: 'bg-green-800 text-green-200',
    plains: 'bg-yellow-700 text-yellow-900',
    hills: 'bg-amber-800 text-amber-300',
    mountains: 'bg-gray-600 text-gray-200',
    swamp: 'bg-teal-800 text-teal-200',
    road: 'bg-stone-500 text-stone-200',
    city_gate: 'bg-stone-600 text-yellow-300'
};

const ContextualView: React.FC<ContextualViewProps> = ({ gameState, onMapAction, onPlayerAction }) => {

    const ReturnToMapButton: React.FC<{className?: string}> = ({ className }) => (
        <button
            onClick={() => onMapAction({ type: 'return_to_city_map' })}
            className={`absolute bottom-4 left-1/2 -translate-x-1/2 bg-black bg-opacity-70 text-white font-bold py-2 px-4 rounded-lg hover:bg-opacity-90 transition-opacity z-10 ${className}`}
        >
            ‚Üê Return to City Map
        </button>
    );

    // --- Sub-Components for Different Views ---

    const SceneImageView = () => {
        const showReturnButton = gameState.currentMapId && ALL_MAPS[gameState.currentMapId].type === 'city' && !!gameState.currentCityLocationId;
        return (
             <div className="w-full h-full bg-black relative flex items-center justify-center transition-all duration-500">
                {gameState.sceneImage ? 
                    <img src={gameState.sceneImage} alt="Current scene generated by AI" className="w-full h-full object-cover animate-fade-in" /> :
                    <div className="text-gray-500 text-2xl">Awaiting a vision...</div>
                }
                {showReturnButton && <ReturnToMapButton />}
            </div>
        );
    }

    const ShopView = () => {
        const partyInventory = gameState.characterProfiles.flatMap(p => p.inventory);

        return (
            <div className="w-full h-full bg-gray-800 p-6 overflow-y-auto custom-scrollbar relative">
                <div className="flex justify-between items-center mb-4 border-b-2 border-yellow-500 pb-2">
                    <h2 className="text-3xl font-bold text-yellow-300 flex items-center gap-3">
                        <CoinIcon className="h-8 w-8" /> Wares for Sale
                    </h2>
                    <div className="px-3 py-1 bg-black bg-opacity-50 rounded-full flex items-center gap-2 border border-yellow-600">
                        <span className="text-xl font-bold text-yellow-300">{gameState.partyGold}</span>
                        <CoinIcon className="h-5 w-5 text-yellow-400" />
                    </div>
                </div>

                <div className="mb-6">
                    <h3 className="text-xl font-semibold text-gray-300 mb-3">Merchant's Stock</h3>
                    <ul className="space-y-3">
                        {gameState.shopInventory?.map((item, index) => (
                            <li key={index} className="flex justify-between items-center p-3 bg-gray-700 rounded-md">
                                <span className="text-lg text-gray-200">{item.name}</span>
                                <button 
                                    onClick={() => onPlayerAction(`I want to buy the ${item.name}.`)}
                                    className="bg-green-600 hover:bg-green-700 text-white font-bold py-1 px-3 rounded-md text-sm transition-colors"
                                >
                                    Buy ({item.cost})
                                </button>
                            </li>
                        ))}
                         {gameState.shopInventory?.length === 0 && <p className="text-gray-400 italic">The merchant has nothing for sale right now.</p>}
                    </ul>
                </div>
                
                 <div>
                    <h3 className="text-xl font-semibold text-gray-300 mb-3">Your Inventory</h3>
                    <ul className="space-y-3 pb-16">
                        {partyInventory.map((item, index) => (
                             <li key={index} className="flex justify-between items-center p-3 bg-gray-900 bg-opacity-50 rounded-md">
                                <span className="text-lg text-gray-300">{item}</span>
                                <button 
                                    onClick={() => onPlayerAction(`I want to sell my ${item}.`)}
                                    className="bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-3 rounded-md text-sm transition-colors"
                                >
                                    Sell
                                </button>
                            </li>
                        ))}
                        {partyInventory.length === 0 && <p className="text-gray-400 italic">Your party's bags are empty.</p>}
                    </ul>
                </div>

                 <ReturnToMapButton />
            </div>
        );
    }

    const BookView = () => (
        <div className="w-full h-full bg-yellow-50 bg-opacity-90 text-gray-900 p-8 overflow-y-auto custom-scrollbar relative" style={{ fontFamily: "'Times New Roman', Times, serif" }}>
            <h2 className="text-4xl font-bold mb-6 text-center border-b-2 border-gray-400 pb-3 flex items-center justify-center gap-3">
                <BookIcon className="h-10 w-10" /> {gameState.readableContent?.title}
            </h2>
            <p className="text-lg leading-relaxed whitespace-pre-wrap pb-16">
                {gameState.readableContent?.text}
            </p>
            <ReturnToMapButton className="text-black bg-white bg-opacity-70" />
        </div>
    );
    
    const GridMapView = (map: GridMap) => {
        const { tiles } = map;
        const { partyGridPosition, movementPoints, visitedTiles, revealedMapIds, currentMapId } = gameState;
        const isMapRevealed = revealedMapIds?.includes(currentMapId);
        
        return (
            <div className="w-full h-full flex flex-col items-center justify-center bg-gray-800 p-4">
                 <p className="text-xl text-yellow-200 mb-4 font-bold">Movement Points: <span className="font-mono text-2xl">{movementPoints}</span></p>
                <div className="grid p-2 bg-black bg-opacity-30 border-2 border-gray-600" style={{ gridTemplateColumns: `repeat(${tiles[0].length}, minmax(0, 1fr))` }}>
                    {tiles.flat().map((tile, index) => {
                        const isPlayerPosition = partyGridPosition?.x === tile.x && partyGridPosition?.y === tile.y;
                        const dx = Math.abs(tile.x - (partyGridPosition?.x || 0));
                        const dy = Math.abs(tile.y - (partyGridPosition?.y || 0));
                        const isAdjacent = (dx <= 1 && dy <= 1) && !(dx === 0 && dy === 0);
                        const canMove = isAdjacent && movementPoints > 0;
                        const tileKey = `${tile.x},${tile.y}`;
                        const isVisited = !!visitedTiles[tileKey] || isMapRevealed;
                        
                        return (
                             <div
                                key={index}
                                title={tile.description}
                                onClick={() => canMove && onMapAction({ type: 'travel_grid', newPosition: { x: tile.x, y: tile.y } })}
                                className={`w-16 h-16 flex items-center justify-center border border-gray-900 border-opacity-50 relative text-4xl transition-all duration-300
                                    ${terrainStyles[tile.terrain] || 'bg-gray-800'}
                                    ${canMove ? 'hover:brightness-125 cursor-pointer ring-2 ring-green-400' : ''}
                                    ${!isVisited ? 'brightness-50' : 'brightness-100'}
                                `}
                            >
                                <span className="opacity-80">{tile.icon}</span>
                                {isPlayerPosition && (
                                    <PartyIcon className="h-10 w-10 absolute text-red-500 drop-shadow-lg" />
                                )}
                            </div>
                        )
                    })}
                </div>
            </div>
        )
    }

    const CityMapView = (map: CityMap) => {
        const { locations, name, imageUrl } = map;
        const currentLocId = gameState.currentCityLocationId;

        return (
            <div className="w-full h-full flex flex-col items-center justify-center bg-gray-800 p-6 overflow-hidden">
                <div 
                    className="w-full h-full max-w-4xl max-h-[80vh] border-8 border-yellow-900 rounded-md shadow-2xl relative bg-cover bg-center"
                    style={{ backgroundImage: `url(${imageUrl})`}}
                >
                    <div className="absolute inset-0 bg-black bg-opacity-20"></div>
                    <h2 className="text-5xl text-center text-white py-4 font-bold" style={{ fontFamily: "'Uncial Antiqua', cursive", textShadow: '2px 2px 4px black' }}>{name}</h2>
                    {locations.map(location => {
                         const isEntryPoint = location.id === map.entryPointId;
                         const isCurrentLocation = location.id === currentLocId;

                         return (
                            <div 
                                key={location.id} 
                                className="absolute transform -translate-x-1/2 -translate-y-1/2" 
                                style={{ top: location.position.top, left: location.position.left }}
                            >
                                 <button
                                    onClick={() => {
                                        if(isCurrentLocation) return;
                                        isEntryPoint ? onMapAction({ type: 'leave_city' }) : onMapAction({ type: 'travel_city', locationId: location.id })
                                    }}
                                    title={location.name}
                                    className={`relative flex items-center justify-center w-16 h-16 rounded-full border-4 transition-all duration-200 group
                                        ${isCurrentLocation ? 'bg-cyan-300 border-cyan-500 ring-4 ring-white animate-pulse' : isEntryPoint ? 'bg-red-300 border-red-600 hover:bg-red-400' : 'bg-yellow-200 border-yellow-800 hover:bg-yellow-300'}
                                    `}
                                >
                                    <span className="text-4xl text-black opacity-70">{location.icon}</span>
                                </button>
                                <div className="absolute top-full left-1/2 -translate-x-1/2 mt-1 w-max px-2 py-1 bg-black bg-opacity-70 text-white text-xs rounded-md pointer-events-none">
                                    {location.name}
                                    {isCurrentLocation && <span className="font-bold text-cyan-300"> (You are here)</span>}
                                </div>
                            </div>
                         )
                    })}
                </div>
            </div>
        )
    }

    // --- Main Render Logic ---

    if (gameState.shopInventory) {
        return <ShopView />;
    }

    if (gameState.readableContent) {
        return <BookView />;
    }
    
    // On the world map
    if (gameState.partyGridPosition) {
        const map = ALL_MAPS[gameState.currentMapId] as GridMap;
        return GridMapView(map);
    }

    // In a city
    if (ALL_MAPS[gameState.currentMapId]?.type === 'city') {
        const map = ALL_MAPS[gameState.currentMapId] as CityMap;
        // On the city streets
        if (gameState.currentCityLocationId === null) {
            return CityMapView(map);
        }
        // Inside a city building
        return <SceneImageView />;
    }

    // Fallback view in case of strange state (or initial load)
    return <SceneImageView />;
};

export default ContextualView;